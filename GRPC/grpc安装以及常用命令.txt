 
 
 执行的目录 
 cd /data/service/mfav-robot/bin
 执行命令如下
 
 ln -s /usr/local/protobuf/bin/protoc /usr/local/bin/protoc
 
protoc --java_out="/protoOut" --grpc_out="/protoOut" --plugin=protoc-gen-grpc="/usr/local/bin/grpc_cpp_plugin" IssueService.proto

##protoc --java_out=/protoOut --grpc_out=/protoOut --plugin=protoc-gen-grpc-java="/usr/local/bin/protoc-gen-grpc-java"  IssueService.proto
##protoc --java_out=/protoOut --grpc_out=/protoOut --plugin=protoc-gen-grpc-java="which protoc-gen-grpc-java"  IssueService.proto
protoc --java_out=/protoOut --grpc_out=/protoOut --plugin=protoc-gen-grpc=/usr/local/bin/protoc-gen-grpc-java IssueService.proto
 
 
 /usr/local/bin/grpc_cpp_plugin

protoc --java_out=“.” --grpc_out=“.” --plugin=protoc-gen-grpc=`which grpc_cpp_plugin` “.” 

protoc-gen-grpc


$ git clone https://github.com/google/protobuf.git
$ cd protobuf
$ git checkout v3.3.0
$ ./autogen.sh
$ ./configure
$ make
$ make check
$ sudo make install


$ git clone https://github.com/grpc/grpc-java.git

git checkout v1.6x

说是移步到 compiler 这个文件夹 

$ cd $GRPC_JAVA_ROOT/compiler

执行编译命令  ( 注意 这个玩意编译的时候最好是 **墙外吧 - 要不然呵呵 我已经试过了)

$ ../gradlew java_pluginExecutable
待编译完成,运行这个玩意 (可以跳过试试 )

$ ../gradlew test

/usr/bin/ld: cannot find -lxxx 的解决办法

gcc -lhdf5 --verbose

查询库文件 libhdf5.so 是否能在搜索路径中找到。

将库文件所在的路径加入到 /etc/ld.so.conf 尾部，并使之生效：

$ sudo echo '/usr/lib/gcc/x86_64-redhat-linux/4.8.2/' >> /etc/ld.so.conf
libhdf5.so 在路径 /opt/biosoft/hdf5-1.8.15-patch1/lib/ 下，将该路径加添加到配置文件中
$ sudo ldconfig
运行该命令，重新载入 /ext/ld.so.conf 中的路径，使修改生效。



To figure out what the linker is looking for, run it in verbose mode.

For example, I encountered this issue while trying to compile MySQL with ZLIB support. I was receiving an error like this during compilation:

/usr/bin/ld: cannot find -lzlib
I did some Googl'ing and kept coming across different issues of the same kind where people would say to make sure the .so file actually exists and if it doesn't, then create a symlink to the versioned file, for example, zlib.so.1.2.8. But, when I checked, zlib.so DID exist. So, I thought, surely that couldn't be the problem.

I came across another post on the Internets that suggested to run make with LD_DEBUG=all:

LD_DEBUG=all make
Although I got a TON of debugging output, it wasn't actually helpful. It added more confusion than anything else. So, I was about to give up.

Then, I had an epiphany. I thought to actually check the help text for the ld command:

ld --help
From that, I figured out how to run ld in verbose mode (imagine that):

ld -lzlib --verbose
This is the output I got:

==================================================
attempt to open /usr/x86_64-linux-gnu/lib64/libzlib.so failed
attempt to open /usr/x86_64-linux-gnu/lib64/libzlib.a failed
attempt to open /usr/local/lib64/libzlib.so failed
attempt to open /usr/local/lib64/libzlib.a failed
attempt to open /lib64/libzlib.so failed
attempt to open /lib64/libzlib.a failed
attempt to open /usr/lib64/libzlib.so failed
attempt to open /usr/lib64/libzlib.a failed
attempt to open /usr/x86_64-linux-gnu/lib/libzlib.so failed
attempt to open /usr/x86_64-linux-gnu/lib/libzlib.a failed
attempt to open /usr/local/lib/libzlib.so failed
attempt to open /usr/local/lib/libzlib.a failed
attempt to open /lib/libzlib.so failed
attempt to open /lib/libzlib.a failed
attempt to open /usr/lib/libzlib.so failed
attempt to open /usr/lib/libzlib.a failed
/usr/bin/ld.bfd.real: cannot find -lzlib
Ding, ding, ding...

So, to finally fix it so I could compile MySQL with my own version of ZLIB (rather than the bundled version):

sudo ln -s  /usr/bin/ld/libstdc.so /usr/lib/gcc/x86_64-redhat-linux/4.8.2/libstdc++.so

sudo ln -s /lib/libstdc++.so /usr/local/lib/libstdc++.so

sudo ln -s /lib/libstdc++.so /usr/x86_64-redhat-linux/lib/libstdc++.so
sudo ln -s /lib/libstdc++.so /usr/x86_64-redhat-linux/lib64/libstdc++.so
sudo ln -s /lib/libstdc++.so /lib64/libstdc++.so
sudo ln -s /lib/libstdc++.so /usr/local/lib64/libstdc++.so
sudo ln -s /lib/libstdc++.so /usr/local/lib/libstdc++.so



sudo ln -s /usr/lib/gcc/x86_64-redhat-linux/4.8.2/libstdc++.so /usr/lib/libstdc++.so

sudo ln -s /data/anaconda3/share/licenses/libstdc++
 /usr/lib64/libstdc++.so
 
 /usr/local/lib/libstdc++.so
 
 g++ /lib/libstdc++.so -lxyz myprog.cpp -o myprog
 
 **************1月18日大佬教的命令*************
 yum install  zlib zlib-devel
 yum install libzlib.so
 ln -s /usr/lib64/libz.so /usr/lib/libzlib.so
 ld -lzlib --verbose
 
 
 
 
 解决grpc-java无法安装的问题
 yum install glibc-static libstdc++-static