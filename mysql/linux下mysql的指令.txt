1	修改密码方法一： 
	在mysql系统外，使用mysqladmin 
	# mysqladmin -u root -p password "test123" 
	Enter password: 【输入原来的密码】 

2	Mysql的逻辑架构。

     查询流程分析    
          
		  
3	MYsql的存储引擎InnoDB   key:sql语句。 value：查询结果。这个较快，但是一直在优化。
                   MyISAM  key:sql语句。 value:索引。这个适用于数据量较大
				   
	行级锁 ：高频写操作比较快
	表级锁
	
4   索引的作用，顾名思义，就是提高数据检索的效率，降低数据库的io成本，
                通过索引列对数据进行排序，降低数据排序的成本，降低cpu的消耗。
				也有缺点，缺点就是降低表的更新速度，例如执行增删改的时候不仅要修改表，还要修改索引的字段。
				索引也是一张表，所占空间比较大。
				
    索引结构：  BTree 索引  B+Tree索引       聚簇索引与非聚簇索引   full-text全文索引
	            Btree和B+Tree区别是节点的结构不一样。BTree存储的是key，指向下个节点的指针，指向数据块的指针。
				而B+Tree存储的是key和指向下个节点的指针。没有指向数据块的指针。
	            两种存储引擎虽然都采用B+Tree索引，但是具体实现不一样
				
	全文索引：  solr和elasticsearch。采用倒排索引。那么什么叫倒排索引呢，简单理解就是分词。比如有一个词语“效率”，
	            那么倒排索引就是将“效”字先定位(0,2,10)；"率"字也相应的定位.(12,15,100)，然后数据库查询的时候直接去
				词库里面查对应的定位。(数据行在磁盘的排列和索引排序保持一致。)
	
	聚簇索引：聚簇索引并不是一种单独的索引方式，而是一种数据存储方式。
	          聚簇表示数据行和相邻的键值进错的存储在一起。
				
               

5   SQL性能下降慢，执行时间长，等待时间长的原因分析： ①数据过多                   解决方案：分库分表
                                                      ②关联了太多的表，太多join             sql优化
													  ③没有充分利用到索引                   索引建立
													  ④服务器调优及各个参数设置             调整my.cnf
													  
6  存储过程函数

		DELIMITER $$
		CREATE FUNCTION rand_string(n INT) RETURNS VARCHAR(255)
		BEGIN
		DECLARE chars_str VARCHAR(100) DEFAULT'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
		DECLARE return_str VARCHAR(255) DEFAULT'';
		DECLARE i INT DEFAULT 0;
		WHILE i<n DO
		SET return_str=CONCAT(return_str,SUBSTRING(chars_str,FLOOR(1+RAND()*52),1));
		SET i =i+1;
		END WHILE;
		RETURN return_str;
		END $$

		**************************************

		DELIMITER $$
		CREATE FUNCTION rand_num(from_num INT,to_num INT)RETURNS INT(11)
		BEGIN
		DECLARE i INT DEFAULT 0;
		SET i = FLOOR(from_num +RAND()*(to_num-from_num+1));
		RETURN i;
		END $$


		***************************************
		DELIMITER $$
		CREATE PROCEDURE insert_emp(START INT,max_num INT)
		BEGIN
		DECLARE i INT DEFAULT 0;
		#autocommit=0 把autocommit设置成0
		SET autocommit = 0;
		REPEAT
		SET i = i+1;
		INSERT INTO emp(empno,NAME,age,deptId)VALUES((START+i),rand_string(6),
		rand_num(30,50),rand_num(1,10000));
		UNTIL i = max_num
		END REPEAT;
		COMMIT;
		END$$
		***********************************
		DELIMITER $$
		CREATE PROCEDURE insert_dept(max_num INT)
		BEGIN
		DECLARE i INT DEFAULT 0;
		SET autocommit =0;
		REPEAT
		SET i = i+1;
		INSERT INTO dept(deptName,address,ceo)VALUES(rand_string(8),rand_string(10),rand_num(1,500000));
		UNTIL i=max_num
		END REPEAT;
		COMMIT;
		END$$
		*************************
		CALL insert_dept(10000)
		CALL insert_emp(100000,500000)
		******************************


7 查询表详细信息
    USE information_schema; 
	*************************
	查询大小
    SELECT CONCAT(ROUND(SUM(data_length/1024/1024),2),'MB') AS data_length_MB,    
     CONCAT(ROUND(SUM(index_length/1024/1024),2),'MB') AS index_length_MB    
     FROM TABLES WHERE    
      table_schema='atest'    
      AND table_name = 'emp';  
	  
8 使用索引的几种原则
   1 全值匹配原则
   2 最佳左前缀原则
   3 查找过程中运用函数的话会导致索引失效
   4 <>会导致索引失效
   5 like匹配
   
9  单键索引，尽量选择针对当前sql过滤性更好的索引
   对选择组合索引的时候，当前sql中过滤性最好的字段在索引字段数序中，位置越靠前越好
   在选择组合索引的时候，尽量选择可以能够包含当前sql中的where字句中更多字段的索引
   在选择组合索引的时候，如果某个字段可能出现范围查询时，尽量把这个字段放在索引次序的最后面
   书写sql语句时，尽量避免造成索引失效的情况
   CREATE INDEX index_name ON table_name (column_list)
   DROP INDEX index_name ON talbe_name
   
  
10 leftjoin 左边放小表
    innerjoin Mysql的优化器会帮助调整结果集
	尽量不要使用子查询
	子查询尽量放到驱动表，把被驱动表使用索引的机会留给实体表
	
11 没有过滤条件的时候，索引是没有用的
   顺序错的时候，一定要排序
   方向相反的时候需要排序
   
12 省市区建表
CREATE TABLE `sys_area` (
  `def_id` int(10) NOT NULL AUTO_INCREMENT COMMENT '表的自增主键',
  `area_id` varchar(20) DEFAULT NULL COMMENT '区域编码',
  `province` varchar(20) DEFAULT NULL COMMENT '省份名称',
  `city` varchar(20) DEFAULT NULL COMMENT '城市名称',
  `district` varchar(20) DEFAULT NULL COMMENT '县区名称',
  `country` varchar(20) DEFAULT NULL COMMENT '乡镇名称',
  `parent_id` int(11) DEFAULT '0' COMMENT '父级结点[省份默认0]',
  `city_acreage` varchar(20) DEFAULT NULL COMMENT '市面积大小',
  `city_population` varchar(20) DEFAULT NULL COMMENT '市人口',
  `city_GDP` varchar(20) DEFAULT NULL COMMENT '市GDP',
  `district_acreage` varchar(20) DEFAULT NULL COMMENT '区/县面积',
  `district_population` varchar(20) DEFAULT NULL COMMENT '区/县人口',
  `district_GDP` varchar(20) DEFAULT NULL COMMENT '区/县GDP',
  PRIMARY KEY (`def_id`)
) ENGINE=InnoDB AUTO_INCREMENT=3541 DEFAULT CHARSET=utf8;

13  关于order by
尽可能在索引列上完成排序操作，遵照索引建的最佳左前缀
order by字句，尽量使用index方式排序，避免使用Filesort方式排序
如果不在索引列上，filesort有两种算法，mysql就要使用单路排序和双路排序：优化策略  ：增大sort_buffer_size参数的设置
                                                                                   增大max_length_for_sort_data参数的设置
																				   减少select后面的查询字段
																				   why

14 慢查询日志
   是存储执行效率比较慢的sql的日志。默认是关闭的，
   分析工具 mysqldumpslow
   mysqldumpslow -s r -t 10 /var/lib/mysql/atguigu.slow.log  返回记录集最多的10个SQL
   mysqladminslow -s c  -t 10 /var/lib/mysql/atguigu.slow.log  得到访问次数最多的10个SQL
   mysqladminslow -s t -t 10 -g  "left join" /var/lib/mysql/atguigu.slow.log 得到按照时间排序的前10条里面含有左连接的查询语句
   mysqladminslow -s r  -t 10 /var/lib/mysql/atguigu.slow.log|more 建议结合|和more使用，否则可能出现爆屏情况
   
   全局查询
   
   
   
   
   
15 关于SQL_NO_CACHE的理解是禁止将结果缓存到结果集，而不是禁止从结果集中读取缓存，如果之前查询过sql，那么之后在读取的时候
   即使使用sql_no_cache也会从结果集中快速返回结果
   
   SET GLOBAL query_cache_size =0;
   SET GLOBAL QUERY_CACHE_TYPE = 0;
   
16 覆盖索引:简单的说就是，select 到from之间查询的列<=使用的索引列+主键

17 查询数据库进程  SHOW PROCESSLIST 

18 并发和并行  并发：同一时间多个线程在争夺某个资源
               并行：同一时间多个线程在执行，互不干扰
			   
    你吃饭吃到一半，电话来了，你一直到吃完了以后才去接，这就说明你不支持并发也不支持并行。你吃饭吃到一半，
	电话来了，你停了下来接了电话，接完后继续吃饭，这说明你支持并发。你吃饭吃到一半，电话来了，你一边打电话一边吃饭，
	这说明你支持并行。并发的关键是你有处理多个任务的能力，不一定要同时。并行的关键是你有同时处理多个任务的能力。

19 锁 
   表锁 ：偏向MyISAM，开销小，粒度大。
            read 读锁的时候只能读，不能更改，不能读取其他表。其他人可以读取这张表
			LOCK TABLE mylock READ;
            SELECT * FROM mylock； 
			LOCK TABLE mylock WRITE; 写锁，自己可以查，可以写。但是其他人不可以读取这张表。
   行锁 ：开销大，加锁慢，会出现死锁。锁定粒度最小，发生锁冲突概率较低，并发度较高。
           写锁(排他锁)
		   update t_emp set age =1 where id =2 for update;   
		   若事务T对数据对象A加上X锁，则只允许T读取和修改A，其他任何事务都不能再对A加任何类型的锁，
		   直到T释放A上的锁。这就保证了其他事务在T释放A上的锁之前不能再读取和修改A。
           读锁(共享锁)
		   select * from t_emp where id =1 lock in share mode
		   共享锁(S锁)又称为读锁，若事务T对数据对象A加上S锁，则事务T只能读A；
		   其他事务只能再对A加S锁，而不能加X锁，直到T释放A上的S锁。这就保证了其他事务可以读A，
		   但在T释放A上的S锁之前不能对A做任何修改。
   
           注意： 如果where等过滤条件里没有索引，会变成表锁
		          间隙锁的出现主要集中在同一个事务中先delete 后 insert的情况下，
				  当我们通过一个参数去删除一条记录的时候， 如果参数在数据库中存在，
				  那么这个时候产生的是普通行锁， 锁住这个记录， 然后删除， 然后释放锁。
				  如果这条记录不存在，问题就来了， 数据库会扫描索引，发现这个记录不存在， 
				  这个时候的delete语句获取到的就是一个间隙锁，然后数据库会向左扫描扫到第一个比给定参数小的值，
				  向右扫描扫描到第一个比给定参数大的值，然后以此为界，构建一个区间， 
				  锁住整个区间内的数据， 一个特别容易出现死锁的间隙锁诞生了。
   
         悲观锁 ： 表锁和行锁都属于悲观锁
         乐观锁：无锁，通过版本号来控制
		 
20  无日志删除表  TRUNCATE TABLE t_emp 
21  mysql count(*) 和count(列) 的区别
count(*) 是统计包含null的记录，而count(列)不含null;
在不带where的情况下count(*)与count(列)相比，并非统计所有列，而是忽略所有列而直接统计行数;
当count(*) 带有where的时候，跟count(列)的性能差不多;
当num字段用了索引时,count(*) 和count(num)性能差不多，但是比没有加索引更优化，少查了很多数据;

22 straight_join = innerjoin 区别在于想改变驱动表时，不让优化器优化。就用straight_join

23 count和count(*)的区别
count(*)对行的数目进行计算，包含NULL
count(column)对特定的列的值具有的行数进行计算，不包含NULL值。
count()还有一种使用方式，count(1)这个用法和count(*)的结果是一样的。

24 if语句   case when语句

	case colume 
	when condition then result
	when condition then result
	when condition then result
	else result
	end
25 Mysql视图中中from后面不允许有子查询，oracle可以
26 显示每个门派年龄第二大的人

    查询排名第二的
    SET @rank=0;
	SET @last_deptid=0;
	SELECT NAME FROM (
	SELECT 
		   t.*,
		   IF(@last_deptid=deptid,@rank:=@rank+1,@rank:=1) AS rk,
		   @last_deptid:=deptid AS last_deptid
		   FROM emp t
		   ORDER BY deptid,age DESC
		   )a WHERE a.rk =2;
		   
27 事件 :一般用来定时更新，周期性的更新表。解决复杂sql的计算慢的问题 类似于oracle的物化视图

28 定时备份数据库
   1 备份命令
   2 把备份文件指定存放
   3   
   命令： 导出  mysqldump -u[root] -p[密码] [数据库]>[文件名.sql]
   mysqldump -uroot -pqinliang110 mydb>backup/mysql/mydb20180411.sql
   
   导入的话>  ****<
    导入外部数据文本:

   执行外部的sql脚本当前数据库上执行:mysql < input.sql指定数据库上执行:mysql [表名] < input.sql

   数据传入命令 load data local infile "[文件名]" into table [表名];
   备份数据库：(dos下)mysqldump --opt school>school.bbbmysqldump -u [user] -p [password] databasename > filename


 (备份)mysql -u [user] -p [password] databasename < filename (恢复)
 
29 shell脚本  linux 不能在windows下写，因为换行符等原因，虽然命令对了，但是有一些看不见的代码
   导致无法在linux下执行
    存储过程  数据库
	lua脚本  redis
	
	按照日期备份数据库
	#! /bin/sh
	DIR=/backup/mysql/`date +%Y%m`
	DATABASE=mydb
	if [ ! -d $DIR ]
	then
	  mkdir -p $DIR
	else
	   echo "already has dir"
	fi
	echo "start to backup"
	mysqldump -uroot -pqinliang110 $DATABASE>$DIR'/'$DATABASE`date +%Y%m%d`'.sql'
	echo $DIR'/'$DATABASE`date +%Y%m%d`'.sql'
	
	定时服务 crond  
	新建定时服务脚本 crontab -e 

30 主从复制
 statement  
 row 函数 强一致性
 mixed 综上的优点
 
31 delete的操作的时候不能使用别名
32  使用timestamp字段的时候默认值可以设置成 current_timestamp
    例子`create_time` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
        `update_time` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '修改时间',
		注意在mysql5.7之前不支持同时有两个current_timestamp
		
33 创建数据库编码集的时候如果要使用微信或者qq的表情的时候，编码集指定为utf64mb
34 Mysql的timestamp属性在数据库中存储的时候存储的为国际时间，在读取的时候转换为客户端当地时间，在javaBean中用java.sql.Date映射

35 在javabean上加上@DynamicUpdate注解，动态更新  如果我们在更新表时,只想更新某个字段,就不要加 @DynamicUpdate,通常为了更新表时的效率,都是不加的.

                                                 反之,如果我们更新某个字段时,更新所有的字段,就可以加上 @DynamicUpdate.本例中由于使用了onupdatetime的时间戳，所以必须要加
 
36  lombook ：可以避免使用get set tostring等方法，直接在javabean中使用@Data注解
37  查询表中的字段SELECT COLUMN_NAME FROM information_schema.columns WHERE table_name='remote_query' AND TABLE_SCHEMA='work_interface'
38  ads数据库不支持 *
39	mybatis中 table要预编译，使用这个${}，而且当需要动态的多个表的时候，可以用foreach嵌套sql 类似   <foreach collection="tableNames" separator="UNION" item="tableName">
40 查看mysql主从配置时的binlog的同步策略 show VARIABLES like '%log%' 修改命令 set global binlog_format='mixed' 也可以在配置文件中修改 binlog_format = mixed


set global binlog_format='mixed'

set global max_allowed_packet = 2000 * 1024 * 1024;


解决mysql事务被锁的方法
用下面指令查询当前运行的sql详细信息 找到thread_id，然后杀掉
select * from information_schema.innodb_trx

kill 11503


select * from information_schema.processlist where DB = 'robotv2.1'

innodb_trx ## 当前运行的所有事务
innodb_locks ## 当前出现的锁
innodb_lock_waits ## 锁等待的对应关系

mysql库名有点的时候，需要转义，库名用``来代替

创建robot-odr账户，并且赋予robotv2.0库只读权限
CREATE USER 'robot-odr'@'%' IDENTIFIED BY 'MySql@hangzhou+2017';

GRANT SELECT ON `robotv2\.0`.* TO 'robot-odr'@'%';

revoke all on case_beijing.* from 'robot-odr'@'%';

revoke all  on '*' from 'robot-odr'@'%';

revoke all on *.* from 'robot-odr'@'%';






帐号 robot-odr
密码 MySql@hangzhou+2017
ip 118.89.162.25
端口 13306

帐号 visitors
密码 f3aad0bb8a764
ip 118.89.162.25
端口 13306



CREATE USER 'visitors'@'%' IDENTIFIED BY 'f3aad0bb8a764';

GRANT SELECT ON `robotv2\.0`.* TO 'visitors'@'%';

mysql迁移的时候，可以把data目录下的文件拷贝，但是若是innodb的存储引擎，需要把ibdata的文件也拷贝。要不然会出现表不存在的错误。
数据库操作时，误删mysql的文件导致(常见于数据库升级或迁移)

:=和=的区别
= 
只有在set和update时才是和:=一样，赋值的作用，其它都是等于的作用。鉴于此，用变量实现行号时，必须用:=
:= 
不只在set和update时时赋值的作用，在select也是赋值的作用。

MySQL之MVVC解决了幻读，利用了乐观锁，InnoDB在每行数据都增加两个隐藏字段，一个记录创建的版本号，一个记录删除的版本号。
所以，mysql默认的RR级别，解决了幻读。解决了事务问题

find_in_set(str, 字段);
select * from nideshop_group_detail where FIND_IN_SET('4',user_id)


数据库三大范式

第一范式

1、每一列属性都是不可再分的属性值，确保每一列的原子性
2. 每一行的数据只能与其中一列相关，即一行数据只做一件事。只要数据列中出现数据重复，就要把表拆分开来。
3.  数据不能存在传递关系，即没个属性都跟主键有直接关系而不是间接关系。








